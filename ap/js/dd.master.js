var dragMaster = (function() {    var dragObject, mouseDownAt, currentDropTarget;		function mouseDown(e) {		e = fixEvent(e);		if (e.which!=1) return; 		mouseDownAt = { x: e.pageX, y: e.pageY, element: this };		addDocumentEventHandlers();		return false;	}	function mouseMove(e){		e = fixEvent(e);		if (mouseDownAt) {//(1)			if (Math.abs(mouseDownAt.x-e.pageX)<5 && Math.abs(mouseDownAt.y-e.pageY)<5) {				return false;			}						var elem  = mouseDownAt.element;// Начать перенос			dragObject = elem.dragObject;// текущий объект для переноса						// запомнить, с каких относительных координат начался перенос			var mouseOffset = getMouseOffset(elem, mouseDownAt.x, mouseDownAt.y);			mouseDownAt = null // запомненное значение больше не нужно, сдвиг уже вычислен						dragObject.onDragStart(mouseOffset); // начали		}		dragObject.onDragMove(e.pageX, e.pageY);// (2)		var newTarget = getCurrentTarget(e);	// (3)		if (currentDropTarget != newTarget) { // (4)			if (currentDropTarget) {				currentDropTarget.onLeave();			}			if (newTarget) {				newTarget.onEnter();			}			currentDropTarget = newTarget;		}		return false;// (5)    }		function getCurrentTarget(e) {		// спрятать объект, получить элемент под ним - и тут же показать опять		if (navigator.userAgent.match('MSIE') || navigator.userAgent.match('Gecko')) {			var x=e.clientX, y=e.clientY;		} else {			var x=e.pageX, y=e.pageY;		}		// чтобы не было заметно мигание - максимально снизим время от hide до show		dragObject.hide();		var elem = document.elementFromPoint(x,y);		dragObject.show();				while (elem) {// найти самую вложенную dropTarget которая может принять dragObject 			if (elem.dropTarget && elem.dropTarget.canAccept(dragObject,elem.dropTarget)) {				return elem.dropTarget;			}			elem = elem.parentNode;		}		return null;// dropTarget не нашли	}	    function mouseUp(){		if (!dragObject) { // (1)			mouseDownAt = null;		} else {			if (currentDropTarget) {// (2)				currentDropTarget.accept(dragObject);				dragObject.onDragSuccess(dragObject,currentDropTarget,true);			} else {				dragObject.onDragFail();			}			dragObject = null;		}		removeDocumentEventHandlers();// (3)    }	function getMouseOffset(target, x, y) {		var docPos	= getOffset(target);		return {x:x - docPos.left, y:y - docPos.top};	}	function addDocumentEventHandlers() {		document.onmousemove = mouseMove;		document.onmouseup = mouseUp;		document.ondragstart = document.body.onselectstart = function() {return false;}	}	function removeDocumentEventHandlers() {		document.onmousemove = document.onmouseup = document.ondragstart = document.body.onselectstart = null;	}    return {		makeDraggable: function(element){			element.onmousedown = mouseDown;		}    }}())